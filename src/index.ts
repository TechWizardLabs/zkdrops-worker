import { Job, Worker } from 'bullmq';
import "dotenv/config";
import { redis } from './db/redis';

// ==================
// üîß Queue Constants
// ==================
const REDIS_QUEUE_NAME = process.env.REDIS_QUEUE_NAME || 'mintQueue';

// ========================
// üõ†Ô∏è Worker Initialization
// ========================
const mintWorker = new Worker(
  REDIS_QUEUE_NAME,
  async (job: Job) => {
    console.log(`üì• [WebhookWorker] Received Job ${job.id}`);
  },
  {
    connection: redis,
    concurrency: 5,
  }
);

// ====================
// üß† Worker Event Logs
// ====================
function bindWorkerEvents(name: string, worker: Worker) {
  worker.on("ready", () => {
    console.log(`üöÄ [${name}] Worker ready`);
  });

  worker.on("ioredis:close", () => {
    console.warn(`‚ö†Ô∏è [${name}] Redis connection closed`);
  });

  worker.on("completed", (job) => {
    console.log(`‚úÖ [${name}] Job ${job.id} completed`);
  });

  worker.on("failed", (job, err) => {
    console.error(`‚ùå [${name}] Job ${job?.id} failed with error:`, err);
  });

  worker.on("progress", (job, progress) => {
    console.log(`üìä [${name}] Job ${job.id} progress:`, progress);
  });
}

bindWorkerEvents("mintWorker", mintWorker);

// ====================
// üß™ Redis Event Logs
// ====================
redis.on("connect", () => console.log("üîå Redis connected"));
redis.on("ready", () => console.log("üöÄ Redis ready"));
redis.on("error", (err: Error) => console.error("üî• Redis error:", err));
redis.on("close", () => console.warn("üîí Redis connection closed"));
redis.on("reconnecting", () => console.info("‚ôªÔ∏è Redis reconnecting..."));

// ============================
// ü´Ä Health Checks and Pingers
// ============================
setInterval(async () => {
  try {
    await redis.ping();
    console.log(`[${new Date().toISOString()}] üîÑ Redis ping`);
  } catch (err) {
    console.error("‚ùó Redis ping failed:", err);
  }
}, 60_000);

setInterval(() => {
  console.log(`[${new Date().toISOString()}] ‚ù§Ô∏è Worker heartbeat`);
}, 5 * 60_000);